--- VUE - Mabe Garcia ----

Materia Promocionable

Link web oficial vuejs:

https://es.vuejs.org/v2/guide/


Link para extensión de Chrome vue.js devtools:

https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=es


Link para extensión de Firefox vue.js devtools:

https://addons.mozilla.org/es/firefox/addon/vue-js-devtools/

VERSION A USAR : 2.7

//CLASE N°1
video:
https://drive.google.com/file/d/13uXPIDn-9tdRtZixkccKj-GnH3gExobN/view

FRAMEWOK VUEJS

    -Creado por Evan You
    -Inspirado en angular.js, reactive.js y rivets.js
    -Framework progresivo para construir interfaces de usuarios
    -Progresivo significa que podemos usarlo para algo muy basico, o agregarle más elementos para aplicaciones más complejas. 
    -Trabaja solo en la capa de la vista, siendo sencillo integrar con otros proyectos o bibliotecas existentes.

CARACTERISTICAS:
    
    -Framework Progresivo de codigo abierto:
        podemos incluir herramientas que necesitemos
    -Virtual Dom:
        Es cualquier tipo de representacion de un DOM real. trata de evitar cambios innesearios en el DOM, que son caros en cuanto reendimiento.

        la re-reoresentacion solo ocurre una vez que se aplica un conjunto de cambios al DOM.

    -Representacion declarativa:
        Podemos crear variables en nuestras apps e imprimirlas en la vista
    
    -Componentes: 
        Pieza de codigo creada por nosotros que va a representar un sector de la pagina, los componentes, tienen sus propios datos, su propio JS, etc (Pueden ser reutilizables)

    -Adaptabilidad: 
        Se puede añadir a aplicaciones web ya existentes y aprovecharlo sin mayores problemas de instalacion

    -Patron MVVM (Modelo Vista - Vista Modelo)
        Patrón de diseño o modelo de abstraccion usados para definir y estructurar los componentes necesarios en el desarrollo de software

    El modelo: 
    Representacion de datos y la logica del negocio, contiene la informacion

    La vista: 
    Debe representar la informacion a traves de los elementos visuales que la componentes

    -sistema reactivo:
        Mantiene interaccion constante con su entorno. por medio de enventos.

--Vue lo podemos usar desde cdn o de manera local-- 

-CDN (link desde la pagna de vue)
-Local (descargamos el archivo VUE lo colocamos en nuestra carpeta de scripts)

HERRAMIENTA PARA DEBUG:

    Extension para navegador (Chrome y firefox)
        Vue.js devtools

MANOS A LA OBRA:

    .Necesitamos incorporar Vue a nuestro proyectos

    .Nosotros vamos a ir a esta direccion y vamos a tenerlo de manera local.

    .Es la forma mas sencilla para empezar y necesitamos que vue funcione mas alla de la coneccion de red 

    .Vamos a tener otro archivo js en el cual vamos a desarrollar la logica para poder trabajar.

    .Este Archivo tendra por ejemplo:

    var app = new Vue({ //crea una  instancia de Vue, le pasa un objeto options
    
    el:'#app',
    data: {
        mensajito:'Dato Dinamico'
    }
    })
    
    el: Proporciona a la instacia de Vue un elemento del DOM existente para montarse. puede ser un selectir CSS. (no se puede montar en la etiqueta html o body)

    vue no se puede poner en body

    data: 
        un objeto con todas las variables que vamos a utilizar

        Para la instancia de vue es un object. Almacenamos las variables y sus valores

        .En la vista tendremos un div con el id mostrar y dentro un parrafo con unas dobles llaves con el nombre de la propiedad del objeto data que queremos mostrar.

        .Esto se conoce como interpolacion, es un enlace de datos que mostrar el valor de la variable.

            <div id="mostrar">
                <p>{{mensajito}}</p>
            </div>

        .tambien podria actualizarse cada vez que cambie la propiedad mensajito del objeto data 

        .Los datos y el DOM ahora estan vinculados

        .Si vamoa a la consola del mavegador, podremos ver ahora este elemento es reactivo

        .Si le cambiamos el contenido a la variable, veremos inmediatamente el cambio.

        .Se pueden realizar interpolaciones unicas que no se actualizan en el cambio de datos, por medio de una directiva

    DIRECTIVAS:

        .Las directivas ofrecen distintos tipo de comportamientos reactivos especiales al DOM representado sobre las etiquetas en las cuales se aplican.

        .Son Atributos especiales para un elemento con prefico V-algo
        
        -v-once --> Renderizara el elemento solo una vez. esto puede ser utilizado para optimizar la performance de actualizacion.

        -v-show --> Esta directiva permite mostrar de modo condicional un elemento.
            
            .Este se rendereizara y lo veremos en el DOM

            .Si el valor de la variable es true, mostrar el elemento, si es false, le aplicara display:none 
        
        .Las llaves dobles interpretan datos como texto plano, no html 

        .para generar html, se utiliza la directiva v-html:

        .si dentro de la etiqueta div tuvieamos escrito algun texto, seria reemplazado por el valor que posee la variable codigo 

        .desoues veremos como crear bloques de codigo de otra manera.


//CLASE N°2

Video: 

https://drive.google.com/file/d/1EZNAn8u8O59qX_6-DZ9u40dSASfMOLuh/view?pli=1


CONTINUAMOS CON DIRECTIVAS:

    -v-cloack --> se le agrega al elemento hasta que la instancia de Vue asociada finalice la compilacion

        .Requiere usar reglas CSS como [v-cloak] { display:none}

        .se usa para ocultar interpolaciones {{codigo}} sin compilar hasta que la instancia de Vue este lista. 

    - v-pre --> Omite la compilacion para el elemento y todos sus elementos secundarios 

        .sirve para mostrar mustaches sin procesar

        .se se omiten grandes cantidades de nodos sin directivas se puede acelerar el proceso de compilacion 

        .la variable existe, pero no la compilarar

     .Los mustaches no se pueden utilizar dentro de los atributos HTML 

     - v-bind --> Enlaza dinamicamente uno o mas atributos, o una propiedad de un componente a una expresion 

        .por ejemplo si queremos enlazar imagen desde nuestra logica 

        <img v-bind:src='imagen'>

        sintaxsis abrebiada: 

            :src 

    MANIPULAR CLASES Y ESTILOS: 

        .tanto los class como los style que usamos en html son atributos que podemos afectar desde Vue. 

        .Por medio del v-bind podemos manejarlos, evaluando objetos o matrices 

        .podemos pasar un objeto para poder asignar clases a un elemento.

        .Tambien se peremite pasar un array para aplicar una lista de clases :

            <p v-bind:class="[mal,error]"/>

    - V-model --> Se aplica sobre elementos de tipo input,select y textarea. se debe aclarar el estado inicial desde las opciones de data.

        <label v-bind:styles="booleano ?'background-color: green;', color: white;' : 'background-color: red;', color: white;'"> valor del checkbox:</label>
    
        .Cuando el checkbox se marque, la variable llamada booleano tendra valor true, y se aplicara el verde, si no se aplicara el rojo


    RESUMIENDO: 

        .Una aplicacion de Vue consiste en una instancia raiz de vue creada con el constructor new Vue 

        .Puede estar organizada en un arbol de componentes anidados y reutilizables 

        .Al crearse una instancia de Vue, se agregaran todas las propiedades encontradas en el objeto data al sistema de reactividad de Vue. 

        .Cuando los valores de esas propiedades cambian, la vista "reaccionara" y se actualizara para coincidir con los nuevos valores. 

        .La vista y el modelo se vinculan por medio de interpolaciones 

        .permiten que los valores de las variables declaradas en el modelo se puedan vern en la vista
        
        . Las directivas otorgan nuevos comportamientos a los elementos del html 

        .Podemos tener mas de una directiva afectando a un mismo elemento ..


DIAPO 2 : 

    Representacion Condicional:

        .Podemos representar elementos y contenidos condicionalmente en funcion de atributos de datos o declaraciones de JavaScript 

        .estos incluyen un v-if, para mostrar un contenedor si una declaracion equivale a verdadero y v-else, para mostrar una alternativa. 

    v-if 

        .se usa para representar condicionalmente un bloque 

        .el bloque solo se representara si la expresion de la directiva devuleve un valor verdadero 

        .en la logica debemos tener: 

            var app = new Vue ({
                el: "#contenedor",
                data: {
                    mensajito:"Mi super App en Vue",
                    mostrar:true 
                }
            })

            <p v-if="mostrar">texto si la variable es true</p>
        
        .Se puede usar v-id si queremos cambiar mas d eun elemento con <template>, este envoltorio una vez compilado no se vera en el codigo final. 

            <template v-if="mostar">
                <p>Esto se mostrara si la variable mostrar es true</p>
                <p>Puedo tener mas estructura de codigo</p>

            </template>
        
        .Esos parrafos no estan drentro de ninguna etiqueta html

        v-if no solo funciona con valores booleanos verdadero/falso. puede verificar si una propiedad de datos es igual a una cadena especifica:

        v-if="selected=='si'"

        .el atributo v-if acepta operadores JS, por lo que puede verificar que no sea igual, mayo o menor que .

    v-else 

        .Permitehacer un elemento alternativo basado en lo contrario de la declaracion v-if 

        .si eso da como resultado verdadero se mostrara el primer elemento, de lo contrario, el elemento que contiene v-else lo hara. 

        .no tiene valor y se coloca dentro de la etiqueta del elemento 

        .el elemento con v-else debe seguir directamente al que contiene v-if: de lo contrario la consola tirara error .

            <p v-if="mostrar">Texto que se mostrará si la variable tiene valor TRUE</p>
		    <p v-else>Texto que se mostrará si la variable tiene valor FALSE</p>
            
    v-else-if 

        .si tenemos que encadenar condiciones podemos usar esta directiva 

        .Debe seguir inmediatamente a un elemento v-if o v-else-if

    v-if vs v-show 

        .v-if es una renderizacion condicional "real" donde los elementos son destruidos y recreados durante la alternancia 

        .v-if tambien es diferido; si la condicion es falsa en la representacion incial, no se hara nada 

        .el bloque condicional no se procesara hasta que la ocndicion se convierta en true por primera vez 

        . con v-show el elemento siempre se representara independientemente de la condicion inicial, con alternancia basada en css.

        .La documentacion suguiere V-SHOW para cambiar algo muy a menudo y elegir v-if si es poco probable que la condicion cambie en ele tiempo de ejecucion 

ITERAR ARRAYS: v-for 

    .Permite representar una lista de elementos basada en una matriz. 
    
    .Requiere una sintaxis especial en forma de item in items.

    .los items son la matriz de datos y el item es un alias para el elemento de matriz que se esta iterando


        <ul> 
            <li v-for="item in peliculas">{{item}}</li>
        </ul> 
       

       <ul> 
            <li v-for="item in peliculas">{{item.nombre}}:{{item.anio}}</li>
        </ul> 

        .se puede usar una etiqueta <template> con v-for para renderizar un bloque con varios elementos

        <ul> 
            <template v-for="x in peliculas">
                <li>{{x.nombre}}</li>
                <li>{{x.anio}}</li>
            </template>
        </ul>

        .dentro de los bloques v-for tenemos acceso completo a las propiedades del ambito principal.

        .v-for admite un segundo argumento opcional para el indice del elemento actual 

        <ul>
            <li v-for="{item.index}in juegos">Indice: {{index}}, {{item.nombre}}, {{item.anio}}</li>
        </ul>

        .puede usar of como delimitador en lugar de in. de modo que este mas cerca de la sintaxis de JS para los iteradores:


        <ul>
            <li v-for="item of juegos">{{item.nombre}}, {{item.anio}}</li>
        </ul>

        <ul>
            <li v-for="value of obj">{{value}}</li>
        </ul>

        .en caso de querer mostrar tambien las propiedades de los objetos podemos usar el segundo argumento key.

        <ul>
            <li v-for="(valor,key) of obj">{{key}}:{{valor}}</li>
        </ul>

        .ademas podriamos pasarle un tercer argumento para mostrar el indice del elemento 

        <ul>
            <li v-for="(valor,key,index) of obj">{{index}}--> Clave: {{key}}, valor: {{valor}} </li>
        </ul>

        . al iterar sobre un objeto, el orden se basa en el orden de enumeracion de las claves (puede que no sea ocnsistente con todas las implementaciones del motor de js )

        .podemos sugerirle a Vue un atributo key unico para cada elemento para que pueda rastrear la ideantidad de cada nodo y reordenarla y reutilizar los elementos existentes.

        .tenemos que usar v-bind para enlazarlo v-bind:key

        .se recomienda que si use el atributo key al usar v-for para aprovechar el rendimiento vue.

            <ul>
                <li v-for = "item in lista" :key="item.id"> {{item.tarea}}</li>
            </ul>

        V-FOR en combinacion con V-IF (no se recomienda )

            .Cuando existe en el mismo elemento v-for tiene mas propiedad
        
            .v-if se ejecutara en cada iteracion del bucle por separado 
            
            .util cuando tenemos que representar nodos solo para algunos elementos

                <li v-for="item in lista" v-if="!item.estado"> {{item.tarea}} </li>

            .esto solo nos mostrara las tareas que tengan estado en false, es decir, que todavia falta realizar 

        Datos complejos:
            se necesita hacer doble iteracion 

                <li v-for="item in datos_complejos" :key="item.id" >{{item.tarea}}</li>
                <span v-for="x in item.elementos"> {{x}}</span>


//CLASE N°3 

video: 
https://drive.google.com/file/d/1guXwhcFGgFHeKbxLvG8k-EytfQPV-A8D/view


DIRECTIVA V-ON:

    -Se utiliza para vincular eventos a un boton, formulario o input o en cualquier cosa. 

        v-on:nombreEvento= "metodo"

    -nombreEvento = puede ser cualquier cosa. puede ser evento de click, evento de tipo mouseover, evento de keypress, focus, etc 

    -esto une los eventos a un formulario, boton o cualquier etiqueta (parrafo, encabezado, div, etc)

        <div v-on:click="mostrar">
            <p>Mostrar</p>
        </div>

    -Es muy importante tener presente que cualquier variable, o metodo que pongamos en el html, debe estar declarado en el codigo de nuesta app contraio la consola arrojara error. 

    -desde la logica tendremos dentro de la instancia de vue una propiedad llamada methods.

    -dentro, crearemos las funciones, es decir tantos metodos como queramos separados por comas.


        methods: {
            guardar: function(){},
            editar: function(){}
        }

        <form v-on:sumbit="guarda">
        <button>guardar</button>
        </form>

    -en el caso de ser un form, el comportamiento al enviar el mismo es recargar la pagina

    -vue posee modificadores para los eventos 

    -despues del envento se coloca punto y el modificador deseado 

        <form v-on:sumbit.prevent="guardar"> (no se recarga la pagina)


    -cuando usamos la directiva v-bind para pasar ´por argumento atributos de etiquetas podiamos usar el atajo:

    -si queremos usar la directiva v-on podemos usar el atajo @

        <p @click="mostrar">ver</p>

MODIFICADORES DE TECLAS:

    -cuando queremos escuchar eventos del teclado, podemos mediante el keycode asignar un evento

    -podriamos asignar keyup(se dispara cuando el usuario deja de presionar una tecla) si el usuario presiona una determinada tecla

    -la funcion enviar se ejecutara cuando el usuario suelta la tecla enter, en este caso pasando su keycode 

        <input v-on:keyup.13="enviar" type="text" v-model="dato"/>

    .https://keycode.info/ --> presionan la tecla del teclado que quieren averiguar su keycode y te lo devuelve

    -vue ofrece poder trabajar con aliar para las teclas mas utilizadas

ENLACE DE DATOS DE 2 VIAS: 

    -Cuando trabajamos con formularios tenemos que tener presente como vamos a tratar los datos.

    -hay un concepto fundamental en vueJs que tiene que vert con el enlace de datos.

    -hasta ahora vimos como los datos inicializados desde el modelo, se mostraba en la vista 

    -para que el enlace de datos de 2 vias ocurra necesitamos la participacion del usuario.

    -con la directiva v-model podemos crear enlace de datos bidireccionales.

    -se usa un elementos de tipo input, textarea y select en formularios 

    -la directiva busca automaticamente la manera correcta de actualizar el elemetno segun el tipo de entrada.

    -al usar el v-model, le decimos a vue que variable debe unirse con esa entrada, en este caso mensaje.

        <input type="text" v-model="mensaje"/>
            <p>{{mensaje}}</p>


        data:{
            mensaje:"Mensajito",
        }

    -el enlace de datos bidireccional significa que si cambia el valor de un modelo en su vista, todo se mantendra actualizado 

MANIPULAR DATOS:

    -Los formularios son un medio efectivo para lograr interaccion con el usuario

    -si queremos que el usuario ingrese datos e ir mostrandoselos a medida qeu lo hace tenemos que resolver la estructura que poseeera esa info

    -por empezar, tener presente que las variables deben inicializarse dentro de data.

    -y las funciones que creermos, dentro de la propiedad methods

        var aoo = new Vue({
            el:".contenedor",
            data:{
                mensaje:"hola",
                lista:[],
            },
            methods:{
                agregar:function(){
                    agregar: function(){
                        this.lista.push(this.mensaje);
                        this.mensaje="";
                    }
                }
            }
        })

    -partimos de un dato inicializado desde el modelo, vamos a agregar cada mensaje nuevo que el usuarui escriba.

    -para poder acceder a las propiedades del objeto data desde las fuciones, tenemos que usar this 

    -por medio del metodo push vamos a ir agregandolos al array lista 

    <form v-on:submit.prevent>
        <input type="text" v-model="mensaje" @keyup.13="agregar"/>
    </form>
        <p>Enlace de datos de 2 vias: {{mensaje}}</p>

    <ul>
        <li v-for="(item,index) in lista"> {{item}}</li>
    </ul>

    -si queremos lograr mas interaccion y que el usuario pueda borrar los datos que fue ingresado, necesitamos crear otra funcion y desde la vista un boton asociado a la misma funcion 

        <li v-for="(item, index) in lista"> {{item}}
            <button @click="borrar(index)">borrar</button>
        </li>

    -cada vez que escibamos una funcion, dentro de la propiedad methods cada funcion debe estar separada por coma 

SPLICE
    -el metodo splice nos permite elegir el elemento del array que querramos eliminar, (index) como segundo argumento le indicamos cuantos a partid del numero del index (en este caso ese elemento solo)

    borrar: function(index){
        this.lista.splice(index,1)
    }

    -una vez eliminado del elemento Dos, los elementos que queda aun enm el array se seguiran mostrando.

    -si queremos verificar que el usuario ingresa un dato y no guarda un elemento vacio 

    data: {
        mensaje"",
        verificar:true 
    }

    .si la variable esta vacia, cambiamos el valor de la variable verificar a false 

    .caso contrario verificar es true, y podemos hacer push 

    methods:{
        agregar:function(){
            if(this.mensaje == ""){
                this.verificar = false
            }else{
                this.verificar = true
                this.lista.push(this.mensaje);
                this.mensaje"";
            }
        }
    }


    <div class="error" :class"verificar ? 'classBien' : 'classError'">
        <p>No puede quedar vacio</p>
    </div>

    El mensaje solo se le mostrar al usuario en caso de soltar el enter y el input no tenga contenido.

CUANTOS ELEMENTOS FUE INGRESANDO EL usuario

    -Desde el objeto data podemos inicializar una variable total en 0 

    -a medida que se haga el push espablecer que el valor del total va a ser el lenght de lo que tenga el array lista 

        this.total = this.lista.lenght

    -cuando el usuario borre algun elemento deberiamos ir restando del valor de total.

        borrar: function(index){
            this.lista.splice(index,1)
            this.total -- 
        },

        <p>datos ingresados {{total}}</p>

LISTA DE ELEMENTOS SELECCIONABLE

    -por defecto el susuario ingresa tareas pendientes, asocuadas a una clase "pendientes"

    - y si selecciona alguna cambiamos la clase a "terminadas"

    -en este caso vamos crear un objeto que contenga dos propiedades mensaje y css

    -cuando el usuario vata cargando las neuvas tareas iremos haciendo push de estos objetos array lista 

        <li v-for="(item, index)in lista " :key="index" :class="item.css">
            <span @click="toggle(index)">{{item.mensaje}}, indice: {{index}}</span>
                <button @click="borrar(index)">Borrar</button>
        </li>

        :class="item.css --> lo definiremos con la clase pendientes cada vez que el usuario agregue un elemento 

        desde la logica:

            toggle: function(index){
                if(this.lista[index].css =="pendientes"){
                    this.sumarTerminadas ++; //sumara y su css pasara a terminados
                    this.lista[index].css= 'terminadas'

                }else{
                    this.sumarTerminadas --; //restara y su css pasara a pendientes 
                    this.lista[index].css = 'pendientes'
                }
            }

    this.lista[index] --> nos va a permitir afectar a la posicion de este elemento que le estamos danto click 

FILTROS

    -En sus primeras versiones el core de vue tenia incorporadoun recurso muy util para la muestra de informacion 

    -actualmente la version 2 no la trae dentro de sus funcionalidades basicas.

    -vuejs nos premite crear nuestros propios filtros 

        filters: {
            mayuscula:function(value){
                if(!value) return ''
                value = value.toString()
                return value.charAt(0).toUpperCase() + value.slice(1)
            }
        }

    charAt(0) selecciona el primer carracter de la cadena 

    toUpperCase() la pasamos a mayuscula 

    slice () obtenemos el resto de la cadena ( desde el segundo caractar, indice 1, hasta el final de la cadena)

    -hay varios desarrollados para incorporar dentro de nuestros proyectos. 

    -https://github.com/freearhey/vue2-filters, ofrece una coleccion de filtros.

    -para poder incorporarlo a nuestro proyecto necesitamos agregar un archivo

    <script src="vue2-filters.min.js"></script>

    -cualquier recurso que dependa de vue js, siempre va debajo de la etiqueta script que lo incorpora, si no tira error
    
    -los filtros solo cambian la representacion del dato, no cambia el dato original 

    -losfiltros pueden usarse dentro de las interpolaciones y en la directiva v-bind

    -dentro de la interpolacion se usa pipe y luego el nombre del filtro que queremos aplicar

        <p> {{mensaje | nombreFiltro}} </p>

    -funcionalidades basicas que podemos obtener: 

        -mayusculas
        -primer letra mayo
        -minuscula
        -colocar texto por defecto si -la variable no lo tiene
        -mostrar un numero de -caracteres 
        -numeros
        -moneda
        -etc

CLASE N°4 :

https://drive.google.com/file/d/11REg6NfR7CkMryLAVA8Yso5gc6eQ96fi/view

COMPONENTES

    .Como la mayoria de los frameworks actuales, el desarrollo de las funcionalidades de una app o sistema se basa en el concepto de componentes 

    .los componentes son una de las caracteristicas mas destacadas de Vue.js
    
    .Un componente es una instancia reutilizable 

    .permiten extender elementos HTML basicos para encapsular codigo 

    .Son elementos personalizados a los que el compilador de Vue.js asociara un comportamiento especifico.

    -UN COMPONENTE es un elemento de la interfaz del programa que tiene su propio contenido, sus propios datos y su propio comportamiento

    .para usar un componente tenemos que registrarlo primero 

    .se usa el metodo Vue.component y pasar la etiqueta y el constructor 

    .la etiqueta sera el nombre del componente y el constructor las opciones del mismo 

    -Recibe un string con el nombre de nuestro componente, que sera el nombre que tendra el elemento del Dom, y un objeto de configuracion que contendra el nombre de las props. el template, datos, metodos, etc 

        Vue.component('mi-componente',{
            //opciones
        })

    Se recomienda usar la nomenclatura "kebab-case" que todo minuscula, separado con "-"

    .Adicionalmente, Vue recomienda que todos los componentes que creen tengan al menos 2 palabras 

    .Esto se debe a que en html las etiquetas van a ser de una sola palabra.

    .asi nos aseguramos evitar conflictos 

    .una vez registrado, un componente puede ser utilizado en el html como un elemento personalizado <mi-componente></mi-componente>

        <div class="contenedor">
            <mi-componente></mi-componente>
        </div>

    .Los componentes van a tener, como minimo, una propiedad "template" que contenga el template en html, icluyendo las directivas de Vue u otros componentes que use. 

        una vez registrado el componente debemos crear la instancia principal de vue
    
    Vue.component('mi-componente',{
        template: '<div><h1>Esto es un mensaje desde un componente</h1></div>'
    });

    var app = new Vue ({
        el:".contenedor",
    })

    .Si examinamos el codigo de la consola, renderiza el componente como si estuviera escrito directamente en el html 

    .desde la opcion de Vue Devtools, en la consola

    .el componente es hijo de la instancia principal 

    .Estos componentes se registran a nivel global, por lo tanto hay que tener presente:

        -todos los componentes deben tener un nombre unico
        -Todos los componentes estan disponibles en todas partes de nuestro codigo js 


PROPIEDAD TEMPLATE 

    -Nos permite determinar un bloque de codigo html con las funcionalidades que nosotros asignemos 

    -dentro de todas las formas que se pueden implementar vamos a mensionar 2.

        1_ Podemos crear el template de un componente con comillas simples o dobles: 

            Vue.component('mi-componente',{
                template:'<div><h1>Dato desdeun componente</h1></div>
            })

            .no permite el uso de enter ni tabular el codigo 
        
        2_ con backticks, comillas oblicuas, permite insertar enters e indentacion 

            .ctrl + alt + } o alt+96 

            .RESTICCION: Debe terner un unico elemento raiz, caso contrario arroja error en la consola 

PROPIEDAD DATA :

    -La opcion data de un componente debe ser una funcion, de modo que cada instancia pueda mantener una copia independiente del objeto de datos devuelto:

    -Los componentes que creamos son reutilizables, por lo tanto los podemos usar varias veces 

ATRIBUTOS PROPS: 

    -sirven para pasar parametros o informacion al propio web component para poder personalizarlo y ajustarlo dependiendo de las necesidades.

    .El objetivo de crear un componente es recibir informacion
     
    .las props son atributos personalizadosque podemos registrar en un componente 

    .Cuando se pasa un valor a un atributo prop, se convierte en una propiedad en esa instancia de componente 

    .un componente puede tener varias props, se puede pasar cualquier prop de forma predeterminada

    .es una bunea practiva escribir las props con camelCase

    Vue.component('componente-props', {
        data: function(){
            return{
                edad:34
            }
        },
        props:['nombre'],
        template: `<div>
            <h1>{{nombre}}: {{edad}}</h1>
            </div>
        `

    })

    <componente-props v-bind:nombre="nombre"></componente-props>

    -esto nos permite que nuestro componente muestre el nombre declarado en la instancia 

    -en caso de querer generar componentes de manera dinamica 
    
    -es probable que estos datos vengan de algun lugar
    
    -en nuestro caso tenemos creado la instancia en un array de objetos llamados articulos

    .cada articulo es un object y tiene varias propiedades: id, titulo, favorito, texto, img, alt 

    -desde nuestro componente llamado componente-multilinea vamos a pasar las propiedades hacia el atributo props como un array 

    Vue.component('componente-multilinea', {
        props:['titulo','texto','img','id', 'alt'],
        template: `<div class="articulos">
            <h1>{{titulo}}</h1>
            <p>{{texto}}</p>
            <img :src'img' :'alt'>
            </div>
        `

    })

    -desde nuestra vista vamos a tener que iterar el array de articulos y vamos a generar por cada uno, un componente con datos distintos 

    <componente-multilinea v-for="x in articulos">

    -por cada iteracion vamos a crear un atributo y mostrar la propiedad del objeto que deseamos pasarle al componente 

    -por medio del atributo key, facilitamos a vue el trabajo de la iteracion ante modificaciones de elementos 

    -con v-id evaluamos si el valor del favorito es tru, caso contrario lo retirar del dom el articulo 

        v-if="x.favorito===true"
    
    -con :class vamos a manipular la aplicacion de clases para cada componetne dependiendo si su id es par o impar 

        :class="x.id %2==1 ? 'lavanda' : 'coral'"
    
    -desde la consola, el panel de Vuejs podremos ver cada componente creado y las respectivas propiedades de cada elemento .    


CLASE N°5: 

Viseo clase:
https://drive.google.com/file/d/1-rAnQTySMQPxP6-YKIl0Ql1_dYvr9cTK/view

LOCAL STORAGE:

    -Forma parte(al igual que sessionStorage) de las Apis html5

    -nos permite lograr la persistencia de datos en la aplicacion

    -espera una clave y un valor para la informacion

    -es un objeto Javascript, por lo tanto tiene metodos y una propiedad 

    -estos metodos nos permiten hacer distintos tipo de cosas:
        -setear elementos 
        -obtener los ya guardados
        -borrar items o todo 


    METODOS: 

        localStorage.setItem(clave, valor);

            -cuando reciba una clave y un valor, añadira estos al almacenamient, o actualizara el valor si la clave ya existe 

        localStorage.getItem(key):

            -devuelve el valor de la clave cuyo nombre se le pasa por parametro, si la clave no existe, devuelve null.

        localStorage.removeItem(key):

            -Elimina la clave cuyo nombre recibe por parametro de almacenamient

        localStorage.clear();

            -Elimina todas las claves que haya en el almacenamiento

        localStorage.key(0);

            -nos permite saber las claves que tenemos guardadas como argumento pondremos el numero de elementos de la clave 

    LA PROPIEDAD

        localStorage.lenght;

            -nos devuelve el numero de elementos guardados

LOCALSTORAGE - JSON 

    ..Limitacion --> Solo podemos guardar cadenas de texto, es decir, solo podemos almacenar datos de tipo string 

    -Si queremos guardar booleanos, numeros, etc? tedremos que usar funciones de parseo de datos 

    -necesitamos el formato JSON 

    -JSON --> JavaScript Object Notation 

    -Sirve para representar datos como atributos con valores, derivado originalmente de la sintaxis de JS 

    -Proporciona un medio ideal para encapsular los datos entre el cliente y el servidor 

    SERIALIZAR - DESERIALIZAR 

        -JSON se usa para representar objetos, con texto serializado(proceso de codificacion de un objeto en un medio de almacenamiento, como localStorage)

        -en complemento la deserializacion cosiste en convertir una secuencia en un objeto 

        -ambos permiten almacenar y transferir facilmente datos

        -los objetos serializados podrian guardarse en un archivo de texto plano 

        -si tenemos que consultar alguna representacion debenos "desearializar"(reconstruir) el archivo de texto plato a objetos 

        -Para estos procesos Json posee 2 funciones : JSON.stringify() y JSON.parse()

        JSON.stringify() -> Recibe por parameto un array y devuelve un string en formato JSON 

        JSON.parse() -> Recibe por parametro el string y devuelve el ARRAYS

    ENTONCES: 

        Para guardar usamos el .stringify 

        para mostrar usamos el .parse 

    MANIPULAR DATOS EN LOCAL: 


    1-
        -Usamos el metodo setItem: guardamos con la clave nombre y le pasamos el valor 

        -Usamos el getItem, pide la clave llamada nombre desde localStorage y lo guardamos en dato_recuperado_local

    2- 
        -Las claves se almacenan en un array y son consideradas como propiedades del objeto localStorage

            localStorage["nombre"]= nombre;

            var dato_recuperado_local = localStorage["nombre"]



    3-
        -Tambien podemos referenciar las claves como propiedades del objeto localStorage

            localStorage.nombre = nombre

            var dato_recuperado_local = localStorage.nombre 


Y si queremos guardar mas datos, y ottro tipos como number, boolean, object, etc ?

    -Podriamos guardar los datos en un objeto 

    -definir en el objeto las propiedades y los valores que nos llegan desde el html 

    no hay que olvidarse que para mostralo tenemos que usar el stringify


si queremos guardar varios datos, tenemos que tener en cuenta que debemos crear una logica que analice si existe, si no lo existe que lo cree, y si existe que se sume a un array y que no lo pise 


CLASE N°6

https://drive.google.com/file/d/1_JLy0I1WAy8A9zvTMf2t2fyobk0EKfQ5/view

FORMULARIOS:

    -Los formularios son el elemento de iteraccion elemental de todo sistema, web o aplicacion

    -Hay ciertas cuestiones que tenmos que recorda dependiendo del elemento que queremos usar para el ingreso de datos de 2 vias 

    -La directiva v-model, dentro del mundo Vue, nos premite crear el data binding de 2 vias o el enlace de datos de 2 vias.

    -Controles cmo inputs, textarea y select poseen esta directiva para poder actualizar de manera correcta el elemento segun el tipo de entrada 

    -En los elementos de tipo textarea la interpolacion no funcio.


        <textarea v-model="form_data.comentario"></textarea> (manera correcta)

    CHECKBOX SIMPLES CON VALOR BOOLEANO:

        <input type="checkbox" id="checkbox" v-model="checked">
        <label for="checlbox">{{checked}}</label>

        los valores que retorna la eleccion puede ser true o false 

    
    -Si el valor inicial del v-model no coincide con ninguna de las opciones, el elemento <select> sera unselected 

    -en iOS esto hara que el usuario no pueda seleccionar el primer elemnto por que iOS no dispara un evento de tipo change 

    -se recomienda dar una opcion deshabilidatada con un value vacio 

    SELECECCION MULTIPLE 

        <select v-model="selected" multiple>
            <option>A</option>
            <option>B</option>
            <option>C</option>
        </select>
        <span>Seleccionados: {{selected}}</span>

    SELECT DINAMICO CON V-FOR 

        <select v-model="elegido">
            <option v-for="item in options" :value="item.value">
            </option>
        </select>
        <span>Sellecionado: {{elegido}}</span>

        ---logica---

        data:{
            elegido:'A'
            options:[
                {texto:'Uno',value:'A'},
                {texto:'Dos',value:'B'},
                {texto:'Tres',value:'C'}
            ]
        }

    VINCULAR VALORES:

        -En los casos de radio, checkbox y option de slect, los valores de vinculacion del v-model suelen ser strings o booleanos 

            <input type="radio" v-model="elegido" value="a">

        (elegido es una string "a" cuando esta chequeado )

            <input type="checkbox" v-model="toggle>

        (toggle es verdadero o falso )

        <select v-model="seleccion">
            <option value="PC">Pc</option>

        </select>

        ("seleccion" es un string "Pc" cuando se seleccion la primera opcion)

        .puede pasar que queramos vincular el valor a una propiedad dinamica en la instancia Vue 

        .Podemos usar v-bind para lograr eso. Ademas, el uso de v-bind nos permite vincular el valor de entrada a los valor no string

    EN CHECKBOX

        <input type="checkbox" v-model="sw" true-value="si" false-value="no"/>

        .los atributos true-value y de false-value no afectan la entrada del atributo value. Los browsers no envian casillas sin marcar 

    EN RADIO 

        <input type="radio" v-model="elegido" v-bind:value="a">

        cuando este elemento esta marcado su valor sera "a" 

    EN SELECT 

        <select v-model="selected">
            <option v-bind:value="{number:123}">123</option>
        </select>

    MODIFICADORES 

        - .lazy --> de forma predeterminada, v-model sincroniza el input con los datos despues de cada evento de tipo input 

        podemos agregar el modificador lazy para realizar la sincronizacion despues del evento change;

            <input v-model.lazy="msg">

        - .number --> podemos configurar que las entradas del usuario se escriban automaticamente como un numero, agregando el modificador number al v-model del elemento:

            <input v-model.number="edad" type="number">

        .esto suele ser util ya que con type="number" el valor retornado siempre sera una cadena de textp 

        .trim --> nos permite recortar los espacios de las entradas del usuario automaticamente, agregando el modificador trim al v-model del elemento (inicio-fin)

            <input v-model.trim="msg">


CLASE 7: 

    CONSULTAS:
    https://drive.google.com/file/d/1QmJa8uEqzhiQZFzdc2lT-Cmkf5AdlMyP/view

CLASE 8:

    ADM:

    https://drive.google.com/file/d/1MuK2-jBoDr5lE5TQNleqI-HSSZyNakIy/view

VALIDAR FORMULARIO:

    -Dependiendo del tipo de campo y de la informacion que queramos almacenar, hay que tener presente el aviso al usuario para facilitarle la tarea 


            "mensajes de alerta"

    -indicarle al usuario, lo que nosotros esperamos de ese campo, le dara la retroalimentacion necesario y tendra una buena experiencia.

    -Desde VueJs podemos hacerlo sin problemas

    -Cuando el usuario quiera enviar el formulario, si hay errores, le ocmunicaremos que es lo que debe corregir.

    -sabemos que gracias a html5 el browser nos permite realizar validaciones, pero vamos a correrlo de esta responsabilidad para que vue se encargue de esto 

        <form v-on:sumbit.prevent="guardar" novalidate>

    -el atributo novalidate, permite anular las validaciones tipicas del browser por medio de los atributos de html5 

    -podemos generar un array de errores e iniciarlizarlo desde el ddata del componente form 

    -Iremos verificando si estos elementos tienen contenido, o si son null, o si cumplen con determinada cantidad de caracteres, etc 

    -si no cumple un campo con lo que estamos esperando que ingrese el usuario, haremos un push al array de erorres y crearemos el mensaje que vera el usuario 


        data:function(){
            return{
                titulo:null,
                anio:null,
                errores:[],

            }
        }

        "desde nuestro componente iniciamos las variables asosiadas a los v-model y el array que sera responasable de ir mostrando los errores"

    -Una vez que el usuario quiera enviar el form ejecutaremos las comprobaciones necesarios 

    if(!this.titulo){
        this.errores.push('El titulo es obligatorio');
    if(!this.anio){
        this.errores.push('El año es obligatorio')
    }
    }

    -Desde la prpiedad template del componente tendremos el html para mostrarlo 

    <div v-if="enviado===true">
        <div v-if="this.errores.length > 0" class="classerror">

        <ul>
        <li v-for="x in errores">{{x}}</li>
        </ul>

        "si hay errores, recorrera el array de erorres y los mostrara en la iteracion"

    if(this.errores.length == 0){
        nuevoObj = {
            comentario:this.comentario,
            titulo:this.titulo,
            seleccion:this.seleccion,
            anio:this.anio 
        }
    }

        "Si no hay errores, creamos un objeto en la logica con todos los v-model de los controles del formulario"


    -Caso contrario significa que no hay errores y mostrara el mensaje de enviado con exito 

        <div v-else class="enviado">
            <span>Enviado con exito</span>
        </div>

    -Una vez que se cumplan las validaciones y todo este ok, verificaremos que this.errores.length sea == 0 

    -recien en ese momento verificaremos si existe el key en localStorage y haremos el push del nuevo juego

    -pasaremos la informacion y guardaremos en el localStorage 


        nuevoObj={comentario:this.comentario,
        titulo:this.titulo,
        seleccion:this.seleccion,
        anio:this.anio,}

            if(!localStorage.dato){
                this.arr=[]
            }else{
                this.arr=JSON.parse(localStorage.getItem("dato"))
            }

        this.arr.push(nuevoObj)
        localStorage.setItem("dato",JSON.stringify(this.arr))

    -Con esta lógica, solo veremos lo que se va ingresando cuando se ejecute la funcion guardar.


        <div v-if="this.arr.length > 0">
            <h2>Datos</h2>
                <ul>
                    <li v-for="item in arr">
                        {{item.titulo}}, {{item.comentario}}
                        <span v-for="x in item.seleccion">{{x}}, </span> {{item.anio}}</li>
                </ul>
        </div>

        -El condicional, nos permite controlar que el titulo Datos no se muestre si no hay elementos que mostrar 

        -en cuyo caso, caemos en el else y le mostraremos al usuario algun mensaje para que cargue datos.


CLASE 9: 

    https://drive.google.com/file/d/1QGzLPW89fT1sup0FWueNtobPGI4xMa6J/view

    PROYECTO: 

    -Un proyecto creado con Vue puede tener multiples formas de crearse 

        -CDN
        -LOCAL
        -Herramienta @vue/cli (actua de asistente y permite crear una estructura de carpetas con un proyexto Vue inicial, con todas las herramientas que necesitemos instaladas y listo para trabjar)

        NECESITAMOS NODE.JS

Que es node.js?

    -Entorno de ejecucion para JS 
    -Servidor Web   
    
    una vez instalado podemos ver en cmd con npm -v y node -v la version 

@vue/cli 

    -Interfaz de linea de comandos de Vue 
    -permite crear una estructura de carpetas con un proyecto Vue inicial, con todas las herramientas instaladas 

            npm install -g @vue/clo 

            vue create nombre-proyecto 

    -esto nos permite empezar con proyecto de ejemplo base, con babel y eslint 
    -tambien elegir a modo manual el tipo de instalacion que requerimos

Babel  
    -es un compilador de JavaScript     
    -Se encarga de convertir codigo ECMAScript a una version de JS compatible con versiones anteriores que cualquier entorno pueda entender 

ESlint 
    -analiza nuestro codigo para encontrar problemas 
    -Su objetivo es que nuestro codigo sea mas consistente y evitar errores 


-Una vez terminada la creacion del proyexto, accedemos a la carpeta creada por consola ( cd pro)

-luego npm run serve 

- cuando inice el servidor nos mostrara en consola la direcciopn por la cual vamos a acceder con el browser 

-si queremos cambiar el puerto -  npm run serve -- --port 3000

-DETENER SERVIDOR: CTRL + C 

-Para saber los compandos soportados npm help



ESTRUCTURA :

    -readme.md fichero con info 

    -gitignore podemos elegir que queremos que git ignore- obligatorio para ignorar node_modules 

    -babel.config.js Configuracion de babel 

        tiene info sobre los presets, plugins y otros detalles de babel sobre el proyexto para saber como va a realizar la transpilacion de codigo js moderno a antiguo 

    -vue.config.js y jsconfig.json son archivos configurados para personalizar el proyecto 

    .public - se utiliza para almacenar ficheros estaticos que no seran procesados por el framework 

    -src (mas importantes) codigo fuente
        -archivos originales sin procesar 

    - .vue son conocidos SFC (Single File Components)
        archivos especiales de Vue, poseen template, script , style 

    - assets . los archivos que tenemos dentro se usan en nuestro codigo importandolos

    -components tendra los componentes .vue que vamos creando durante nuestro proyecto 

    -App.vue es el componente general 

    -main.js fichero principal que arranca el proyecto Vue 

    dist/ almacena archivos finales 

    Webpack es una herramienta que empaqueta y optimiza los recursos (js, imagenes, fuentes, css, etc) y los transforma en archivos que pueda entender el navegador

    solo se guardan en la carpeta dist si creamos un build en la modalidad de produccion.

    -node_modules instalamos paquetes o dependecias mediante npm 

    -desde nuestro js podemos importar paquetes externos instalados mediante npm 

para saber que dependencias tenemos instaladas en un proyexto utilizar el comando npm list y el parametro --depth 0 


.VUE : 

    3 secciones;

        template
        script 
        style 


    App.vue 

        componente padre dentro de su propio template tiene al componente hijo 

    main.js 

        punto de netrada de Js y contiene : 

        -core de vue 
        -App 


CLASE 10: 

https://drive.google.com/file/d/1L9Sxb-HyH5O6GUmFDsHqlHb28E-Elq5y/view

Ciclo de vida Vuejs 

    beforeCreate: se invoca inmediatamente despues de que se ha inicializado la instancia, antes de la observacion de datos y la configuracion de eventos y observacores 

    created:Se invoca despues de crear la instancia
    la instancia ha terminado de procesar las opciones 
    la propiedad $el aun no esta disponibles
    
    BeforeMount: invocado justo antes de que comience el montaje: la funcion render esta punto de ser llamado por primera vez 

    Mounted: es invocado despues de que se montado la instancia, donde "el" se reemplaza por el recien creado vm.$el. si la instancia raiz esta montada en un elemento en el documento vm$el tambien esta en el documento cuando se llame a mounted 

    beforeUpdate: el invocado cuando los datos cambian, antes de que se actualize el DOM. este es un buen lugar para acceder al DOM existente antes de una actualizacion.

    updated: invocado despues de que un cambio de datos hace que el DOM virtual se vuelva a procesar y actualizar 

    beforeDestroy: justo antes de que se destuya una instancia de Vue. en esta etapa la instancia todavia es funcional 

    Destroyed: invocado despues de que una intancia de Vue ha sido destruida. cuando se llama a este hook, todas las directivas de la instancia de Vue se han desvinculado, todos los listeners de evento se eliminan y todas las instancias de Vue secundarias tambien se han destruidos.

    -desde la consola vamos a crear un proyexto que tenfa vue-router 

    -sobre la particion o ruta que seleccionen en sus pc, crearemos el proyecto "enrutamiento"

    vue create enrutamineto 

        -elegiremos Manually select features 

        -nos mostrara las opciones para configurar el nuevo proyecto 

        -para seleccionar los items usamos la tecla space 

        -el proyextot tendra vue 2 , babel, eslint y router 

        -router sin history - eslint con prevencion de errores que revise el codigo al guardar y que todo lo que se guarde en archivos especificos 

        -una vez que se cree el proyecto entramos en la carpeta enrutamiento 

            cd enrutamiento 

        -con el comando dir, podremos ver la estructura de archivos generada 

        -finalmente corremos en servido 

            npm run serve 

        -si examinamos la estructuras de archivos veremos que se crearon 2 carpetas views y router 